/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,20],$V2=[1,18],$V3=[1,17],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[1,19],$V9=[1,11],$Va=[1,11,80],$Vb=[1,29],$Vc=[1,11,14,80],$Vd=[1,31],$Ve=[1,30],$Vf=[1,32],$Vg=[1,33],$Vh=[1,11,14,20,35,36,37,39,40,41,42,43,44,45,46,48,50,51,57,58,59,65,66,68,70,77,80],$Vi=[1,45],$Vj=[1,55],$Vk=[1,58],$Vl=[1,63],$Vm=[1,69],$Vn=[1,70],$Vo=[1,71],$Vp=[1,64],$Vq=[1,66],$Vr=[1,68],$Vs=[1,11,14,57,58,59,65,66,68,77],$Vt=[1,11,14,57,58,59,61,65,66,68,77],$Vu=[2,52],$Vv=[1,75],$Vw=[1,11,14,20,35,39,40,41,42,43,44,45,46,48,50,51,57,58,59,65,66,68,70,77,80],$Vx=[11,14],$Vy=[1,88],$Vz=[1,94],$VA=[1,95],$VB=[1,99],$VC=[2,54],$VD=[1,113],$VE=[1,114],$VF=[1,115],$VG=[1,11,14,50,51,57,58,59,65,66,68,70,77],$VH=[1,119],$VI=[1,120],$VJ=[1,121],$VK=[1,122],$VL=[1,123],$VM=[1,124],$VN=[1,125],$VO=[1,126],$VP=[1,127],$VQ=[1,11,14];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"PositiveInteger":3,"POSITIVE_INT":4,"Identifier":5,"IDENTIFIER":6,"TypeToken":7,"INT":8,"VARCHAR":9,"(":10,")":11,"ColumnDef":12,"ColumnDefList":13,",":14,"CreateStmt":15,"CREATE":16,"TABLE":17,"IdentifierList":18,"Number":19,"-":20,"NON_NEGTIVE_INT":21,"NON_NEGTIVE_FLOAT1":22,"NON_NEGTIVE_FLOAT2":23,"String":24,"STRING":25,"Value":26,"ValueList":27,"InsertStmt":28,"INSERT":29,"INTO":30,"VALUES":31,"Expr":32,".":33,"ExprList":34,"+":35,"*":36,"/":37,"CompareExpr":38,"=":39,"!=":40,"<>":41,">=":42,">":43,"<=":44,"<":45,"IS":46,"NULL":47,"NOT":48,"LogicExpr":49,"AND":50,"OR":51,"opt_AS":52,"AS":53,"opt_OUTER":54,"OUTER":55,"JoinQulifier":56,"INNER":57,"LEFT":58,"RIGHT":59,"JoinCond":60,"ON":61,"SubQuery":62,"SelectStmt":63,"SubQueryList":64,"CROSS":65,"JOIN":66,"WhereClause":67,"WHERE":68,"GroupbyClause":69,"GROUP":70,"BY":71,"Orderby":72,"ASC":73,"DESC":74,"OrderbyList":75,"OrderbyClause":76,"ORDER":77,"OutputList":78,"SELECT":79,"FROM":80,"Expressions":81,"$accept":0,"$end":1},
terminals_: {2:"error",4:"POSITIVE_INT",6:"IDENTIFIER",8:"INT",9:"VARCHAR",10:"(",11:")",14:",",16:"CREATE",17:"TABLE",20:"-",21:"NON_NEGTIVE_INT",22:"NON_NEGTIVE_FLOAT1",23:"NON_NEGTIVE_FLOAT2",25:"STRING",29:"INSERT",30:"INTO",31:"VALUES",33:".",35:"+",36:"*",37:"/",39:"=",40:"!=",41:"<>",42:">=",43:">",44:"<=",45:"<",46:"IS",47:"NULL",48:"NOT",50:"AND",51:"OR",53:"AS",55:"OUTER",57:"INNER",58:"LEFT",59:"RIGHT",61:"ON",65:"CROSS",66:"JOIN",68:"WHERE",70:"GROUP",71:"BY",73:"ASC",74:"DESC",77:"ORDER",79:"SELECT",80:"FROM"},
productions_: [0,[3,1],[5,1],[7,1],[7,4],[12,2],[13,1],[13,3],[15,6],[18,1],[18,3],[19,1],[19,2],[19,1],[19,2],[19,1],[19,2],[19,1],[19,2],[24,1],[26,1],[26,1],[27,1],[27,3],[28,10],[32,1],[32,3],[32,1],[32,1],[32,4],[32,3],[32,3],[32,3],[32,3],[32,3],[34,1],[34,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,4],[38,4],[49,1],[49,3],[49,3],[49,3],[49,2],[52,0],[52,1],[54,0],[54,1],[56,1],[56,2],[56,2],[60,2],[62,1],[62,3],[62,3],[62,5],[64,1],[64,3],[64,3],[64,4],[64,5],[64,4],[67,2],[69,3],[72,1],[72,2],[72,2],[75,1],[75,3],[76,3],[78,1],[78,1],[78,3],[63,2],[63,4],[63,5],[63,6],[63,7],[63,5],[81,1],[81,1],[81,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = +(yytext); 
break;
case 2:

			this.$ = yytext;
		
break;
case 3:

			this.$ = {
				type: 'int',
				length: 4,
				norm_text: function () {
					return "int";
				}
			};
		
break;
case 4:

			this.$ = {
				type: 'varchar',
				length: $$[$0-1],
				norm_text: function () {
					return "varchar(" + this.length + ")";
				}
			};
		
break;
case 5:

			this.$ = {
				type: 'ColumnDef',
				column_name: $$[$0-1],
				column_type: $$[$0],
				norm_text: function () {
					return this.column_name + " " + this.column.type;
				}
			};
		
break;
case 6: case 9: case 22: case 35:

			this.$ = [$$[$0]];
		
break;
case 7: case 10: case 23: case 36:

			this.$ = $$[$0-2];
			this.$.push($$[$0]);
		
break;
case 8:

			this.$ = {
				type: 'CreateStmt',
				table_name: $$[$0-3],
				column_defs: $$[$0-1],
				norm_text: function () {
					return "CREATE TABLE " + this.table_name + " (" + norm_array(this.column_defs) + ")";
				}
			};
		
break;
case 11: case 13: case 15: case 17:
 this.$ = +($$[$0]); 
break;
case 12: case 14:
 this.$ = -($$[$0-1]); 
break;
case 16: case 18:
 this.$ = +($$[$0-1]); 
break;
case 19:
 this.$ = $$[$0].replace(/''/g, "'"); 
break;
case 20: case 21:
 this.$ = $$[$0]; 
break;
case 24:

			this.$ = {
				type: 'InsertStmt',
				table_name: $$[$0-7],
				column_names: $$[$0-5],
				values: $$[$0-1],
				norm_text: function () {
					return "INSERT INTO " + this.table_name + " (" + this.column_names.join(",") + ") VALUES (" + this.values.join(",") + ")";
				}
			};
		
break;
case 25:

			this.$ = {
				type: 'Expr',
				sub_type: 'identifier',
				value: $$[$0],
				norm_text: function () { return this.value; }
			};
		
break;
case 26:

			this.$ = {
				type: 'Expr',
				sub_type: 'identifier2',
				value1: $$[$0-2],
				value2: $$[$0],
				norm_text: function () { return this.value1 + "." + this.value2; }
			};
		
break;
case 27:

			this.$ = {
				type: 'Expr',
				sub_type: 'string',
				value: $$[$0],
				norm_text: function () { return "'" + escape_string(this.value) + "'"; }
			};
		
break;
case 28:

			this.$ = {
				type: 'Expr',
				sub_type: 'number',
				value: $$[$0],
				norm_text: function () { return this.value; }
			};
		
break;
case 29:

			this.$ = {
				type: 'Expr',
				sub_type: 'function',
				function_name: $$[$0-3],
				function_args: $$[$0-1],
				norm_text: function () { return this.function_name + "(" + norm_array(this.function_args) + ")"; }
			};
		
break;
case 30: case 48: case 65:

			this.$ = $$[$0-1];
		
break;
case 31: case 32:

			this.$ = {
				type: 'Expr',
				sub_type: 'binary_op',
				op: $$[$0-1],
				prec: 50,
				left: $$[$0-2],
				right: $$[$0],
				norm_text: function () { return norm_expr(this.left, this.prec) + " " + this.op + " " + norm_expr(this.right, this.prec) }
			};
		
break;
case 33: case 34:

			this.$ = {
				type: 'Expr',
				sub_type: 'binary_op',
				op: $$[$0-1],
				prec: 60,
				left: $$[$0-2],
				right: $$[$0],
				norm_text: function () { return norm_expr(this.left, this.prec) + " " + this.op + " " + norm_expr(this.right, this.prec) }
			};
		
break;
case 37: case 38: case 39: case 40: case 41: case 42: case 43:

			this.$ = {
				type: 'Expr',
				sub_type: 'binary_op',
				op: $$[$0-1],
				prec: 40,
				left: $$[$0-2],
				right: $$[$0],
				norm_text: function () { return norm_expr(this.left, this.prec) + " " + this.op + " " + norm_expr(this.right, this.prec) }
			};
		
break;
case 44:

			this.$ = {
				type: 'Expr',
				sub_type: 'unary_op',
				op: 'IS_NULL',
				prec: 40,
				value: $$[$0-2],
				norm_text: function () {
					return this.value.norm_text() + " IS NULL";
				}
			};
		
break;
case 45: case 46:

			this.$ = {
				type: 'Expr',
				sub_type: 'unary_op',
				op: 'NOT_IS_NULL',
				prec: 40,
				value: $$[$0-3],
				norm_text: function () {
					return this.value.norm_text() + " IS NOT NULL";
				}
			};
		
break;
case 47: case 64:

			this.$ = $$[$0];
		
break;
case 49:

			this.$ = {
				type: 'Expr',
				sub_type: 'binary_op',
				op: 'AND',
				prec: 20,
				left: $$[$0-2],
				right: $$[$0],
				norm_text: function () { return norm_expr(this.left, this.prec) + " " + this.op + " " + norm_expr(this.right, this.prec) }
			};
		
break;
case 50:

			this.$ = {
				type: 'Expr',
				sub_type: 'binary_op',
				op: 'OR',
				prec: 10,
				left: $$[$0-2],
				right: $$[$0],
				norm_text: function () { return norm_expr(this.left, this.prec) + " " + this.op + " " + norm_expr(this.right, this.prec) }
			};
		
break;
case 51:

			this.$ = {
				type: 'Expr',
				sub_type: 'unary_op',
				op: 'NOT',
				prec: 30,
				value: $$[$0],
				norm_text: function () {
					return "NOT " + norm_expr(this.value);
				}
			};
		
break;
case 56:
 this.$ = 'inner'; 
break;
case 57:
 this.$ = 'left outer'; 
break;
case 58:
 this.$ = 'right outer'; 
break;
case 59:

			this.$ = {
				type: 'JoinCond',
				value: $$[$0],
				norm_text: function () {
					return "ON " + this.value.norm_text();
				}
			};
		
break;
case 60:

			this.$ = {
				type: 'SubQuery',
				sub_type: 'single',
				query: $$[$0],
				table_alias: null,
				norm_text: function () {
					return this.query;
				}
			};
		
break;
case 61:

			this.$ = {
				type: 'SubQuery',
				sub_type: 'single',
				query: $$[$0-2],
				table_alias: $$[$0],
				norm_text: function () {
					return this.query + " AS " + this.table_alias;
				}
			};
		
break;
case 62:

			this.$ = {
				type: 'SubQuery',
				sub_type: 'query',
				query: $$[$0-1],
				table_alias: null,
				norm_text: function () {
					return "(" + this.query.norm_text() + ")";
				}
			};
		
break;
case 63:

			this.$ = {
				type: 'SubQuery',
				sub_type: 'query',
				query: $$[$0-3],
				table_alias: $$[$0-1],
				norm_text: function () {
					return "(" + this.query.norm_text() + ") AS " + this.table_alias;
				}
			};
		
break;
case 66:

			this.$ = {
				type: 'Join',
				sub_type: 'cross',
				query1: $$[$0-2],
				query2: $$[$0],
				norm_text: function () {
					return this.query1.norm_text() + " JOIN " + this.query2.norm_text();
				}
			};
		
break;
case 67:

			this.$ = {
				type: 'Join',
				sub_type: 'cross',
				query1: $$[$0-3],
				query2: $$[$0],
				norm_text: function () {
					return this.query1.norm_text() + " JOIN " + this.query2.norm_text();
				}
			};
		
break;
case 68:

			this.$ = {
				type: 'Join',
				sub_type: $$[$0-3],
				query1: $$[$0-4],
				query2: $$[$0-1],
				cond: $$[$0],
				norm_text: function () {
					return this.query1.norm_text() + " " + this.sub_type + " " + this.query2.norm_text() + " ON " + this.cond.norm_text();
				}
			};
		
break;
case 69:

			this.$ = {
				type: 'Join',
				sub_type: 'inner',
				query1: $$[$0-3],
				query2: $$[$0-1],
				cond: $$[$0],
				norm_text: function () {
					return this.query1.norm_text() + " JOIN " + this.query2.norm_text() + " ON " + this.cond.norm_text();
				}
			};
		
break;
case 70:

			this.$ = {
				type: 'WhereClause',
				value: $$[$0],
				norm_text: function () {
					return "WHERE " + this.value.norm_text();
				}
			};
		
break;
case 71:

			this.$ = {
				type: 'GroupbyClause',
				value: $$[$0],
				norm_text: function () {
					return "GROUP BY " + this.value.norm_text();
				}
			};
		
break;
case 72:

			this.$ = {
				type: 'Orderby',
				name: $$[$0],
				asc: true,
				norm_text: function () { return this.name.norm_text(); }
			};
		
break;
case 73:

			this.$ = {
				type: 'Orderby',
				name: $$[$0-1],
				asc: true,
				norm_text: function () { return this.name.norm_text(); }
			};
		
break;
case 74:

			this.$ = {
				type: 'Orderby',
				name: $$[$0-1],
				asc: false,
				norm_text: function () { return this.name.norm_text() + " DESC"; }
			};
		
break;
case 75:

			this.$ = {
				type: 'OrderbyList',
				values: [$$[$0]],
				norm_text: function () {
					return this.values.join(",");
				}
			};
		
break;
case 76:

			this.$ = {
				type: 'OrderbyList',
				values: $$[$0-2].concat($$[$0]),
				norm_text: function () {
					return this.values.join(",");
				}
			};
		
break;
case 77:

			this.$ = {
				type: 'OrderbyClause',
				value: $$[$0],
				norm_text: function () {
					return "ORDER BY " + this.value.norm_text();
				}
			};
		
break;
case 78:

			this.$ = {
				type: 'output_list',
				values: [{
					type: 'star',
					norm_text: function () { return "*"; }
				}]
			};
		
break;
case 79:

			this.$ = {
				type: 'output_list',
				values: [].concat($$[$0]),
				norm_text: function () {
					return norm_array(this.values);
				}
			};
		
break;
case 80:

			this.$ = {
				type: 'output_list',
				values: [{
					type: 'star',
					norm_text: function () { return "*"; }
				}].concat($$[$0]),
				norm_text: function () {
					return norm_array(this.values);
				}
			};
		
break;
case 81:

			this.$ = {
				type: 'SelectStmt',
				output: $$[$0],
				norm_text: function () {
					return "SELECT " + this.output.norm_text();
				}
			};
		
break;
case 82:

			this.$ = {
				type: 'SelectStmt',
				output: $$[$0-2],
				from: $$[$0],
				where: null,
				groupby: null,
				orderby: null,
				norm_text: function () {
					return "SELECT " + this.output.norm_text() + " FROM " + this.from.norm_text();
				}
			};
		
break;
case 83:

			this.$ = {
				type: 'SelectStmt',
				output: $$[$0-3],
				from: $$[$0-1],
				where: $$[$0],
				groupby: null,
				orderby: null,
				norm_text: function () {
					return "SELECT " + this.output.norm_text() + " FROM " + this.from.norm_text() + " WHERE " + this.where.norm_text();
				}
			};
		
break;
case 84:

			this.$ = {
				type: 'SelectStmt',
				output: $$[$0-4],
				from: $$[$0-2],
				where: $$[$0-1],
				groupby: null,
				orderby: $$[$0],
				norm_text: function () {
					return "SELECT " + this.output.norm_text() + " FROM " + this.from.norm_text() + " WHERE " + this.where.norm_text()
						+ " ORDER BY " + this.orderby.norm_text();
				}
			};
		
break;
case 85:

			this.$ = {
				type: 'SelectStmt',
				output: $$[$0-5],
				from: $$[$0-3],
				where: $$[$0-2],
				groupby: $$[$0-1],
				orderby: $$[$0],
				norm_text: function () {
					return "SELECT " + this.output.norm_text() + " FROM " + this.from.norm_text() + " WHERE " + this.where.norm_text()
						+ " GROUP BY " + this.groupby.norm_text() + " ORDER BY " + this.orderby.norm_text();
				}
			};
		
break;
case 86:

			this.$ = {
				type: 'SelectStmt',
				output: $$[$0-3],
				from: $$[$0-1],
				where: null,
				groupby: null,
				orderby: $$[$0],
				norm_text: function () {
					return "SELECT " + this.output.norm_text() + " FROM " + this.from.norm_text() + " ORDER BY " + this.orderby.norm_text();
				}
			};
		
break;
case 87: case 88: case 89:
 return $$[$0]; 
break;
}
},
table: [{15:2,16:[1,5],28:3,29:[1,6],63:4,79:$V0,81:1},{1:[3]},{1:[2,87]},{1:[2,88]},{1:[2,89]},{17:[1,8]},{30:[1,9]},{4:$V1,5:14,6:$V2,10:$V3,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:13,34:12,36:$V9,78:10},{5:25,6:$V2},{5:26,6:$V2},o($V9,[2,81],{80:[1,27]}),o($Va,[2,78],{14:[1,28]}),o($Va,[2,79],{14:$Vb}),o($Vc,[2,35],{20:$Vd,35:$Ve,36:$Vf,37:$Vg}),o($Vh,[2,25],{10:[1,35],33:[1,34]}),o($Vh,[2,27]),o($Vh,[2,28]),{4:$V1,5:14,6:$V2,10:$V3,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:36},o([1,6,10,11,14,20,33,35,36,37,39,40,41,42,43,44,45,46,48,50,51,53,57,58,59,61,65,66,68,70,73,74,77,80],[2,2]),o($Vh,[2,19]),o($Vh,[2,11]),{4:[1,37],21:[1,38],22:[1,39],23:[1,40]},o($Vh,[2,13]),o($Vh,[2,15]),o($Vh,[2,17]),{10:[1,41]},{10:[1,42]},{5:46,6:$V2,10:$Vi,62:44,64:43},{4:$V1,5:14,6:$V2,10:$V3,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:13,34:47},{4:$V1,5:14,6:$V2,10:$V3,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:48},{4:$V1,5:14,6:$V2,10:$V3,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:49},{4:$V1,5:14,6:$V2,10:$V3,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:50},{4:$V1,5:14,6:$V2,10:$V3,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:51},{4:$V1,5:14,6:$V2,10:$V3,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:52},{5:53,6:$V2},{4:$V1,5:14,6:$V2,10:$V3,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:13,34:54},{11:$Vj,20:$Vd,35:$Ve,36:$Vf,37:$Vg},o($Vh,[2,12]),o($Vh,[2,14]),o($Vh,[2,16]),o($Vh,[2,18]),{6:$Vk,12:57,13:56},{5:60,6:$V2,18:59},o($V9,[2,82],{67:61,76:62,56:65,14:$Vl,57:$Vm,58:$Vn,59:$Vo,65:$Vp,66:$Vq,68:[1,67],77:$Vr}),o($Vs,[2,64]),{5:46,6:$V2,10:$Vi,62:44,63:73,64:72,79:$V0},o($Vt,[2,60],{52:74,6:$Vu,53:$Vv}),o($Va,[2,80],{14:$Vb}),o($Vc,[2,36],{20:$Vd,35:$Ve,36:$Vf,37:$Vg}),o($Vw,[2,31],{36:$Vf,37:$Vg}),o($Vw,[2,32],{36:$Vf,37:$Vg}),o($Vh,[2,33]),o($Vh,[2,34]),o($Vh,[2,26]),{11:[1,76],14:$Vb},o($Vh,[2,30]),{11:[1,77],14:[1,78]},o($Vx,[2,6]),{7:79,8:[1,80],9:[1,81]},{11:[1,82],14:[1,83]},o($Vx,[2,9]),o($V9,[2,83],{76:84,69:85,70:[1,86],77:$Vr}),o($V9,[2,86]),{5:46,6:$V2,10:$Vy,62:87},{66:[1,89]},{66:[1,90]},{5:46,6:$V2,10:$Vy,62:91},{4:$V1,5:14,6:$V2,10:$Vz,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:96,38:93,48:$VA,49:92},{71:[1,97]},{66:[2,56]},{54:98,55:$VB,66:$VC},{54:100,55:$VB,66:$VC},{11:[1,101],14:$Vl,56:65,57:$Vm,58:$Vn,59:$Vo,65:$Vp,66:$Vq},{11:[1,102]},{5:103,6:$V2},{6:[2,53]},o($Vh,[2,29]),{1:[2,8]},{6:$Vk,12:104},o($Vx,[2,5]),o($Vx,[2,3]),{10:[1,105]},{31:[1,106]},{5:107,6:$V2},o($V9,[2,84]),{76:108,77:$Vr},{71:[1,109]},o($Vs,[2,66]),{63:73,79:$V0},{5:46,6:$V2,10:$Vy,62:110},{5:46,6:$V2,10:$Vy,62:111},{60:112,61:$VD},o([1,11,70,77],[2,70],{50:$VE,51:$VF}),o($VG,[2,47]),{4:$V1,5:14,6:$V2,10:$Vz,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:117,38:93,48:$VA,49:116},{4:$V1,5:14,6:$V2,10:$Vz,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:96,38:93,48:$VA,49:118},{20:$Vd,35:$Ve,36:$Vf,37:$Vg,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,48:$VP},{5:130,6:$V2,72:129,75:128},{66:[2,57]},{66:[2,55]},{66:[2,58]},o($Vs,[2,65]),o($Vt,[2,62],{52:131,6:$Vu,53:$Vv}),o($Vt,[2,61]),o($Vx,[2,7]),{3:132,4:[1,133]},{10:[1,134]},o($Vx,[2,10]),o($V9,[2,85]),{5:135,6:$V2},o($Vs,[2,67]),{60:136,61:$VD},o($Vs,[2,69]),{4:$V1,5:14,6:$V2,10:$Vz,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:96,38:93,48:$VA,49:137},{4:$V1,5:14,6:$V2,10:$Vz,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:96,38:93,48:$VA,49:138},{4:$V1,5:14,6:$V2,10:$Vz,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:96,38:93,48:$VA,49:139},{11:[1,140],50:$VE,51:$VF},{11:$Vj,20:$Vd,35:$Ve,36:$Vf,37:$Vg,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,48:$VP},o($VG,[2,51]),{4:$V1,5:14,6:$V2,10:$V3,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:141},{4:$V1,5:14,6:$V2,10:$V3,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:142},{4:$V1,5:14,6:$V2,10:$V3,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:143},{4:$V1,5:14,6:$V2,10:$V3,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:144},{4:$V1,5:14,6:$V2,10:$V3,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:145},{4:$V1,5:14,6:$V2,10:$V3,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:146},{4:$V1,5:14,6:$V2,10:$V3,19:16,20:$V4,21:$V5,22:$V6,23:$V7,24:15,25:$V8,32:147},{47:[1,148],48:[1,149]},{46:[1,150]},o($V9,[2,77],{14:[1,151]}),o($VQ,[2,75]),o($VQ,[2,72],{73:[1,152],74:[1,153]}),{5:154,6:$V2},{11:[1,155]},{11:[2,1]},{4:$V1,19:158,20:$V4,21:$V5,22:$V6,23:$V7,24:159,25:$V8,26:157,27:156},{77:[2,71]},o($Vs,[2,68]),o($Vs,[2,59],{50:$VE,51:$VF}),o($VG,[2,49]),o([1,11,14,51,57,58,59,65,66,68,70,77],[2,50],{50:$VE}),o($VG,[2,48]),o($VG,[2,37],{20:$Vd,35:$Ve,36:$Vf,37:$Vg}),o($VG,[2,38],{20:$Vd,35:$Ve,36:$Vf,37:$Vg}),o($VG,[2,39],{20:$Vd,35:$Ve,36:$Vf,37:$Vg}),o($VG,[2,40],{20:$Vd,35:$Ve,36:$Vf,37:$Vg}),o($VG,[2,41],{20:$Vd,35:$Ve,36:$Vf,37:$Vg}),o($VG,[2,42],{20:$Vd,35:$Ve,36:$Vf,37:$Vg}),o($VG,[2,43],{20:$Vd,35:$Ve,36:$Vf,37:$Vg}),o($VG,[2,44]),{47:[1,160]},{47:[1,161]},{5:130,6:$V2,72:162},o($VQ,[2,73]),o($VQ,[2,74]),o($Vt,[2,63]),o($Vx,[2,4]),{11:[1,163],14:[1,164]},o($Vx,[2,22]),o($Vx,[2,20]),o($Vx,[2,21]),o($VG,[2,45]),o($VG,[2,46]),o($VQ,[2,76]),{1:[2,24]},{4:$V1,19:158,20:$V4,21:$V5,22:$V6,23:$V7,24:159,25:$V8,26:165},o($Vx,[2,23])],
defaultActions: {2:[2,87],3:[2,88],4:[2,89],69:[2,56],75:[2,53],77:[2,8],98:[2,57],99:[2,55],100:[2,58],133:[2,1],135:[2,71],163:[2,24]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function make_keyword_or_identifier(token) {
	var utoken = token.toUpperCase();

	switch (utoken) {
		case 'AND':
		case 'AS':
		case 'ASC':
		case 'BY':
		case 'CREATE':
		case 'CROSS':
		case 'DELETE':
		case 'DESC':
		case 'DROP':
		case 'FROM':
		case 'INNER':
		case 'INSERT':
		case 'INT':
		case 'INTO':
		case 'IS':
		case 'JOIN':
		case 'LEFT':
		case 'NOT':
		case 'NULL':
		case 'ON':
		case 'OR':
		case 'ORDER':
		case 'OUTER':
		case 'RIGHT':
		case 'SELECT':
		case 'TABLE':
		case 'UPDATE':
		case 'VALUES':
		case 'VARCHAR':
		case 'WHERE':
			return utoken;
		default:
			return 'IDENTIFIER';
	}
}

function escape_string(val) {
	return val.replace("'", "''");
}

function norm_array(arr) {
	return arr.map(function (item) {
		return item.norm_text();
	}).join(",");
}

function norm_expr (expr_obj, prec) {
	var text = expr_obj.norm_text();
	return expr_obj.prec && prec && prec > expr_obj.prec ? "(" + text + ")" : text;
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore whitespace */
break;
case 1:
							yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
							return 25;
						
break;
case 2:
							yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
							return 6;
						
break;
case 3:return make_keyword_or_identifier(yy_.yytext);
break;
case 4:return 22;
break;
case 5:return 23;
break;
case 6:return 4;
break;
case 7:return 21;
break;
case 8:/* ignore comment */
break;
case 9:return 10;
break;
case 10:return 11;
break;
case 11:return 35;
break;
case 12:return 20;
break;
case 13:return 36;
break;
case 14:return 37;
break;
case 15:return 39;
break;
case 16:return 40;
break;
case 17:return 41;
break;
case 18:return 44;
break;
case 19:return 45;
break;
case 20:return '>=;';
break;
case 21:return 43;
break;
case 22:return 33;
break;
case 23:return 14;
break;
case 24:/* return 'EOF' */
break;
}
},
rules: [/^(?:\s+)/,/^(?:'(''|[^\'])*')/,/^(?:"(""|[^\"])*")/,/^(?:[a-zA-Z][0-9a-zA-Z_]*)/,/^(?:\d+\.\d*)/,/^(?:\.\d+)/,/^(?:[1-9]\d*)/,/^(?:\d+)/,/^(?:\/\/.*)/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:=)/,/^(?:!=)/,/^(?:<>)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:\.)/,/^(?:,)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}