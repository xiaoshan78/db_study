/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var sql_grammar = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"PositiveInteger":3,"POSITIVE_INT":4,"Identifier":5,"IDENTIFIER":6,"TypeToken":7,"INT":8,"VARCHAR":9,"(":10,")":11,"ColumnDef":12,"ColumnDefList":13,",":14,"CreateStmt":15,"CREATE":16,"TABLE":17,"IdentifierList":18,"Number":19,"-":20,"POSITIVE_FLOAT":21,"String":22,"STRING":23,"Value":24,"ValueList":25,"InsertStmt":26,"INSERT":27,"INTO":28,"VALUES":29,"Expr":30,"ExprList":31,"+":32,"*":33,"/":34,"CompareExpr":35,"=":36,"!=":37,"<>":38,">=":39,">":40,"<=":41,"<":42,"IS":43,"NULL":44,"NOT":45,"LogicExpr":46,"AND":47,"OR":48,"opt_AS":49,"AS":50,"opt_OUTER":51,"OUTER":52,"JoinQulifier":53,"INNER":54,"LEFT":55,"RIGHT":56,"JoinCond":57,"ON":58,"SubQuery":59,"SelectStmt":60,"SubQueryList":61,"CROSS":62,"JOIN":63,"WhereClause":64,"WHERE":65,"GroupbyClause":66,"Orderby":67,"ASC":68,"DESC":69,"OrderbyList":70,"OrderbyClause":71,"ORDER":72,"BY":73,"OutputList":74,"SELECT":75,"FROM":76,"Expressions":77,"$accept":0,"$end":1},
terminals_: {2:"error",4:"POSITIVE_INT",6:"IDENTIFIER",8:"INT",9:"VARCHAR",10:"(",11:")",14:",",16:"CREATE",17:"TABLE",20:"-",21:"POSITIVE_FLOAT",23:"STRING",27:"INSERT",28:"INTO",29:"VALUES",32:"+",33:"*",34:"/",36:"=",37:"!=",38:"<>",39:">=",40:">",41:"<=",42:"<",43:"IS",44:"NULL",45:"NOT",47:"AND",48:"OR",50:"AS",52:"OUTER",54:"INNER",55:"LEFT",56:"RIGHT",58:"ON",62:"CROSS",63:"JOIN",65:"WHERE",68:"ASC",69:"DESC",72:"ORDER",73:"BY",75:"SELECT",76:"FROM"},
productions_: [0,[3,1],[5,1],[7,1],[7,4],[12,2],[13,1],[13,3],[15,6],[18,1],[18,3],[19,1],[19,2],[19,1],[19,2],[22,1],[24,1],[24,1],[25,1],[25,3],[26,10],[30,1],[30,1],[30,1],[30,4],[30,3],[30,3],[30,3],[30,3],[30,3],[31,1],[31,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,4],[35,4],[46,1],[46,3],[46,3],[46,3],[46,2],[49,0],[49,1],[51,0],[51,1],[53,1],[53,2],[53,2],[57,2],[59,1],[59,3],[59,3],[59,5],[61,1],[61,3],[61,4],[61,4],[61,4],[64,0],[64,2],[66,0],[67,1],[67,2],[67,2],[70,1],[70,3],[71,3],[74,1],[74,1],[74,3],[60,2],[60,6],[77,1],[77,1],[77,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = +(yytext); 
break;
case 2: this.$ = yytext; 
break;
case 3:
			this.$ = {
				type: 'int',
				length: 4
			};
		
break;
case 4:
			this.$ = {
				type: 'varchar',
				length: $$[$0-1]
			};
		
break;
case 5:
			this.$ = {
				type: 'ColumnDef',
				column_name: $$[$0-1],
				column_type: $$[$0]
			};
		
break;
case 6:
			this.$ = [$$[$0]];
		
break;
case 7:
			this.$ = $$[$0-2];
			this.$.push($$[$0]);
		
break;
case 8:
			this.$ = {
				type: 'CreateStmt',
				table_name: $$[$0-3],
				column_defs: $$[$0-1]
			};
		
break;
case 9:
			this.$ = [$$[$0]];
		
break;
case 10:
			this.$ = $$[$0-2];
			this.$.push($$[$0]);
		
break;
case 11: this.$ = +($$[$0]); 
break;
case 12: this.$ = -($$[$0-1]); 
break;
case 13: this.$ = +($$[$0]); 
break;
case 14: this.$ = +($$[$0-1]); 
break;
case 15: this.$ = $$[$0].replace(/''/g, "'"); 
break;
case 16: this.$ = $$[$0]; 
break;
case 17: this.$ = $$[$0]; 
break;
case 18:
			this.$ = [$$[$0]];
		
break;
case 19:
			this.$ = $$[$0-2];
			this.$.push($$[$0]);
		
break;
case 20:
			this.$ = {
				type: 'InsertStmt',
				table_name: $$[$0-7],
				column_names: $$[$0-5],
				values: $$[$0-1]
			};
		
break;
case 21:
			this.$ = {
				type: 'Expr',
				sub_type: 'identifier',
				value: $$[$0]
			};
		
break;
case 22:
			this.$ = {
				type: 'Expr',
				sub_type: 'string',
				value: $$[$0]
			};
		
break;
case 23:
			this.$ = {
				type: 'Expr',
				sub_type: 'number',
				value: $$[$0]
			};
		
break;
case 24:
			this.$ = {
				type: 'Expr',
				sub_type: 'function',
				function_name: $$[$0-3],
				function_args: $$[$0-1]
			};
		
break;
case 25:
			this.$ = $$[$0-1];
		
break;
case 26:
			this.$ = {
				type: 'Expr',
				sub_type: 'binary_op',
				op: $$[$0-1],
				left: $$[$0-2],
				right: $$[$0]
			};
		
break;
case 27:
			this.$ = {
				type: 'Expr',
				sub_type: 'binary_op',
				op: $$[$0-1],
				left: $$[$0-2],
				right: $$[$0]
			};
		
break;
case 28:
			this.$ = {
				type: 'Expr',
				sub_type: 'binary_op',
				op: $$[$0-1],
				left: $$[$0-2],
				right: $$[$0]
			};
		
break;
case 29:
			this.$ = {
				type: 'Expr',
				sub_type: 'binary_op',
				op: $$[$0-1],
				left: $$[$0-2],
				right: $$[$0]
			};
		
break;
case 30:
			this.$ = [$$[$0]];
		
break;
case 31:
			this.$ = $$[$0-2];
			this.$.push($$[$0]);
		
break;
case 32:
			this.$ = {
				type: 'Expr',
				sub_type: 'binary_op',
				op: $$[$0-1],
				left: $$[$0-2],
				right: $$[$0]
			};
		
break;
case 33:
			this.$ = {
				type: 'Expr',
				sub_type: 'binary_op',
				op: $$[$0-1],
				left: $$[$0-2],
				right: $$[$0]
			};
		
break;
case 34:
			this.$ = {
				type: 'Expr',
				sub_type: 'binary_op',
				op: $$[$0-1],
				left: $$[$0-2],
				right: $$[$0]
			};
		
break;
case 35:
			this.$ = {
				type: 'Expr',
				sub_type: 'binary_op',
				op: $$[$0-1],
				left: $$[$0-2],
				right: $$[$0]
			};
		
break;
case 36:
			this.$ = {
				type: 'Expr',
				sub_type: 'binary_op',
				op: $$[$0-1],
				left: $$[$0-2],
				right: $$[$0]
			};
		
break;
case 37:
			this.$ = {
				type: 'Expr',
				sub_type: 'binary_op',
				op: $$[$0-1],
				left: $$[$0-2],
				right: $$[$0]
			};
		
break;
case 38:
			this.$ = {
				type: 'Expr',
				sub_type: 'binary_op',
				op: $$[$0-1],
				left: $$[$0-2],
				right: $$[$0]
			};
		
break;
case 39:
			this.$ = {
				type: 'Expr',
				sub_type: 'unary_op',
				op: 'is_null',
				value: $$[$0-2]
			};
		
break;
case 40:
			this.$ = {
				type: 'Expr',
				sub_type: 'unary_op',
				op: 'not_is_null',
				value: $$[$0-3]
			};
		
break;
case 41:
			this.$ = {
				type: 'Expr',
				sub_type: 'unary_op',
				op: 'not_is_null',
				value: $$[$0-3]
			};
		
break;
case 42:
			this.$ = $$[$0];
		
break;
case 43:
			this.$ = $$[$0-1];
		
break;
case 44:
			this.$ = {
				type: 'Expr',
				sub_type: 'binary_op',
				op: 'and',
				left: $$[$0-2],
				right: $$[$0]
			}
		
break;
case 45:
			this.$ = {
				type: 'Expr',
				sub_type: 'binary_op',
				op: 'or',
				left: $$[$0-2],
				right: $$[$0]
			}
		
break;
case 46:
			this.$ = {
				type: 'Expr',
				sub_type: 'unary_op',
				op: 'not',
				value: $$[$0]
			}
		
break;
case 51: this.$ = 'inner'; 
break;
case 52: this.$ = 'left outer'; 
break;
case 53: this.$ = 'right outer'; 
break;
case 54: this.$ = $$[$0-1]; 
break;
case 55:
			this.$ = {
				type: 'SubQuery',
				sub_type: 'single',
				query: $$[$0],
				table_alias: null
			};
		
break;
case 56:
			this.$ = {
				type: 'SubQuery',
				sub_type: 'single',
				query: $$[$0-2],
				table_alias: $$[$0]
			};
		
break;
case 57:
			this.$ = {
				type: 'SubQuery',
				sub_type: 'query',
				query: $$[$0-1],
				table_alias: null
			};
		
break;
case 58:
			this.$ = {
				type: 'SubQuery',
				sub_type: 'query',
				query: $$[$0-3],
				table_alias: $$[$0-1]
			};
		
break;
case 59:
			this.$ = [$$[$0]];
		
break;
case 60:
			this.$ = $$[$0-2];
			this.$.push({
				type: 'Join',
				sub_type: 'cross',
				query: $$[$0]
			});
		
break;
case 61:
			this.$ = $$[$0-3];
			this.$.push({
				type: 'Join',
				sub_type: 'cross',
				query: $$[$0]
			});
		
break;
case 62:
			this.$ = $$[$0-3];
			this.$.push({
				type: 'Join',
				sub_type: $$[$0-2],
				query: $$[$0-1],
				cond: $$[$0]
			});
		
break;
case 63:
			this.$ = $$[$0-3];
			this.$.push({
				type: 'Join',
				sub_type: 'inner',
				query: $$[$0-1],
				cond: $$[$0]
			});
		
break;
case 64:
			this.$ = null;
		
break;
case 65:
			this.$ = $$[$0];
		
break;
case 66:
			this.$ = null;
		
break;
case 67:
			this.$ = {
				type: 'Orderby',
				name: $$[$0],
				asc: true
			};
		
break;
case 68:
			this.$ = {
				type: 'Orderby',
				name: $$[$0-1],
				asc: true
			};
		
break;
case 69:
			this.$ = {
				type: 'Orderby',
				name: $$[$0-1],
				asc: false
			};
		
break;
case 70:
			this.$ = [$$[$0]];
		
break;
case 71:
			this.$ = $$[$0-2];
			this.$.push($$[$0]);
		
break;
case 72:
			this.$ = $$[$0];
		
break;
case 73:
			this.$ = {
				type: '*'
			};
		
break;
case 74:
			this.$ = $$[$0];
		
break;
case 75:
			this.$ = [ { type: '*' }, $$[$0] ];
		
break;
case 76:
			this.$ = {
				type: 'SelectStmt',
				output_list: $$[$0]
			};
		
break;
case 77:
			this.$ = {
				type: 'SelectStmt',
				output: $$[$0-4],
				from: $$[$0-2],
				where: $$[$0-1],
				orderby: $$[$0]
			};
		
break;
case 78: return $$[$0]; 
break;
case 79: return $$[$0]; 
break;
case 80: return $$[$0]; 
break;
}
},
table: [{15:2,16:[1,5],26:3,27:[1,6],60:4,75:[1,7],77:1},{1:[3]},{1:[2,78]},{1:[2,79]},{1:[2,80]},{17:[1,8]},{28:[1,9]},{4:[1,20],5:14,6:[1,18],10:[1,17],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:13,31:12,33:[1,11],74:10},{5:23,6:[1,18]},{5:24,6:[1,18]},{1:[2,76],11:[2,76],76:[1,25]},{1:[2,73],11:[2,73],14:[1,26],76:[2,73]},{1:[2,74],11:[2,74],14:[1,27],76:[2,74]},{1:[2,30],11:[2,30],14:[2,30],20:[1,29],32:[1,28],33:[1,30],34:[1,31],76:[2,30]},{1:[2,21],10:[1,32],11:[2,21],14:[2,21],20:[2,21],32:[2,21],33:[2,21],34:[2,21],36:[2,21],37:[2,21],38:[2,21],39:[2,21],40:[2,21],41:[2,21],42:[2,21],43:[2,21],45:[2,21],47:[2,21],48:[2,21],54:[2,21],55:[2,21],56:[2,21],62:[2,21],63:[2,21],65:[2,21],72:[2,21],76:[2,21]},{1:[2,22],11:[2,22],14:[2,22],20:[2,22],32:[2,22],33:[2,22],34:[2,22],36:[2,22],37:[2,22],38:[2,22],39:[2,22],40:[2,22],41:[2,22],42:[2,22],43:[2,22],45:[2,22],47:[2,22],48:[2,22],54:[2,22],55:[2,22],56:[2,22],62:[2,22],63:[2,22],65:[2,22],72:[2,22],76:[2,22]},{1:[2,23],11:[2,23],14:[2,23],20:[2,23],32:[2,23],33:[2,23],34:[2,23],36:[2,23],37:[2,23],38:[2,23],39:[2,23],40:[2,23],41:[2,23],42:[2,23],43:[2,23],45:[2,23],47:[2,23],48:[2,23],54:[2,23],55:[2,23],56:[2,23],62:[2,23],63:[2,23],65:[2,23],72:[2,23],76:[2,23]},{4:[1,20],5:14,6:[1,18],10:[1,17],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:33},{1:[2,2],6:[2,2],10:[2,2],11:[2,2],14:[2,2],20:[2,2],32:[2,2],33:[2,2],34:[2,2],36:[2,2],37:[2,2],38:[2,2],39:[2,2],40:[2,2],41:[2,2],42:[2,2],43:[2,2],45:[2,2],47:[2,2],48:[2,2],50:[2,2],54:[2,2],55:[2,2],56:[2,2],58:[2,2],62:[2,2],63:[2,2],65:[2,2],68:[2,2],69:[2,2],72:[2,2],76:[2,2]},{1:[2,15],11:[2,15],14:[2,15],20:[2,15],32:[2,15],33:[2,15],34:[2,15],36:[2,15],37:[2,15],38:[2,15],39:[2,15],40:[2,15],41:[2,15],42:[2,15],43:[2,15],45:[2,15],47:[2,15],48:[2,15],54:[2,15],55:[2,15],56:[2,15],62:[2,15],63:[2,15],65:[2,15],72:[2,15],76:[2,15]},{1:[2,11],11:[2,11],14:[2,11],20:[2,11],32:[2,11],33:[2,11],34:[2,11],36:[2,11],37:[2,11],38:[2,11],39:[2,11],40:[2,11],41:[2,11],42:[2,11],43:[2,11],45:[2,11],47:[2,11],48:[2,11],54:[2,11],55:[2,11],56:[2,11],62:[2,11],63:[2,11],65:[2,11],72:[2,11],76:[2,11]},{4:[1,34],21:[1,35]},{1:[2,13],11:[2,13],14:[2,13],20:[2,13],32:[2,13],33:[2,13],34:[2,13],36:[2,13],37:[2,13],38:[2,13],39:[2,13],40:[2,13],41:[2,13],42:[2,13],43:[2,13],45:[2,13],47:[2,13],48:[2,13],54:[2,13],55:[2,13],56:[2,13],62:[2,13],63:[2,13],65:[2,13],72:[2,13],76:[2,13]},{10:[1,36]},{10:[1,37]},{5:40,6:[1,18],10:[1,41],59:39,61:38},{4:[1,20],5:14,6:[1,18],10:[1,17],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:13,31:42},{4:[1,20],5:14,6:[1,18],10:[1,17],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:43},{4:[1,20],5:14,6:[1,18],10:[1,17],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:44},{4:[1,20],5:14,6:[1,18],10:[1,17],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:45},{4:[1,20],5:14,6:[1,18],10:[1,17],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:46},{4:[1,20],5:14,6:[1,18],10:[1,17],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:47},{4:[1,20],5:14,6:[1,18],10:[1,17],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:13,31:48},{11:[1,49],20:[1,29],32:[1,28],33:[1,30],34:[1,31]},{1:[2,12],11:[2,12],14:[2,12],20:[2,12],32:[2,12],33:[2,12],34:[2,12],36:[2,12],37:[2,12],38:[2,12],39:[2,12],40:[2,12],41:[2,12],42:[2,12],43:[2,12],45:[2,12],47:[2,12],48:[2,12],54:[2,12],55:[2,12],56:[2,12],62:[2,12],63:[2,12],65:[2,12],72:[2,12],76:[2,12]},{1:[2,14],11:[2,14],14:[2,14],20:[2,14],32:[2,14],33:[2,14],34:[2,14],36:[2,14],37:[2,14],38:[2,14],39:[2,14],40:[2,14],41:[2,14],42:[2,14],43:[2,14],45:[2,14],47:[2,14],48:[2,14],54:[2,14],55:[2,14],56:[2,14],62:[2,14],63:[2,14],65:[2,14],72:[2,14],76:[2,14]},{6:[1,52],12:51,13:50},{5:54,6:[1,18],18:53},{14:[1,56],53:58,54:[1,61],55:[1,62],56:[1,63],62:[1,57],63:[1,59],64:55,65:[1,60],72:[2,64]},{14:[2,59],54:[2,59],55:[2,59],56:[2,59],62:[2,59],63:[2,59],65:[2,59],72:[2,59]},{6:[2,47],14:[2,55],49:64,50:[1,65],54:[2,55],55:[2,55],56:[2,55],58:[2,55],62:[2,55],63:[2,55],65:[2,55],72:[2,55]},{60:66,75:[1,7]},{1:[2,75],11:[2,75],14:[1,27],76:[2,75]},{1:[2,31],11:[2,31],14:[2,31],20:[1,29],32:[1,28],33:[1,30],34:[1,31],76:[2,31]},{1:[2,26],11:[2,26],14:[2,26],20:[2,26],32:[2,26],33:[1,30],34:[1,31],36:[2,26],37:[2,26],38:[2,26],39:[2,26],40:[2,26],41:[2,26],42:[2,26],43:[2,26],45:[2,26],47:[2,26],48:[2,26],54:[2,26],55:[2,26],56:[2,26],62:[2,26],63:[2,26],65:[2,26],72:[2,26],76:[2,26]},{1:[2,27],11:[2,27],14:[2,27],20:[2,27],32:[2,27],33:[1,30],34:[1,31],36:[2,27],37:[2,27],38:[2,27],39:[2,27],40:[2,27],41:[2,27],42:[2,27],43:[2,27],45:[2,27],47:[2,27],48:[2,27],54:[2,27],55:[2,27],56:[2,27],62:[2,27],63:[2,27],65:[2,27],72:[2,27],76:[2,27]},{1:[2,28],11:[2,28],14:[2,28],20:[2,28],32:[2,28],33:[2,28],34:[2,28],36:[2,28],37:[2,28],38:[2,28],39:[2,28],40:[2,28],41:[2,28],42:[2,28],43:[2,28],45:[2,28],47:[2,28],48:[2,28],54:[2,28],55:[2,28],56:[2,28],62:[2,28],63:[2,28],65:[2,28],72:[2,28],76:[2,28]},{1:[2,29],11:[2,29],14:[2,29],20:[2,29],32:[2,29],33:[2,29],34:[2,29],36:[2,29],37:[2,29],38:[2,29],39:[2,29],40:[2,29],41:[2,29],42:[2,29],43:[2,29],45:[2,29],47:[2,29],48:[2,29],54:[2,29],55:[2,29],56:[2,29],62:[2,29],63:[2,29],65:[2,29],72:[2,29],76:[2,29]},{11:[1,67],14:[1,27]},{1:[2,25],11:[2,25],14:[2,25],20:[2,25],32:[2,25],33:[2,25],34:[2,25],36:[2,25],37:[2,25],38:[2,25],39:[2,25],40:[2,25],41:[2,25],42:[2,25],43:[2,25],45:[2,25],47:[2,25],48:[2,25],54:[2,25],55:[2,25],56:[2,25],62:[2,25],63:[2,25],65:[2,25],72:[2,25],76:[2,25]},{11:[1,68],14:[1,69]},{11:[2,6],14:[2,6]},{7:70,8:[1,71],9:[1,72]},{11:[1,73],14:[1,74]},{11:[2,9],14:[2,9]},{71:75,72:[1,76]},{5:40,6:[1,18],10:[1,41],59:77},{63:[1,78]},{5:40,6:[1,18],10:[1,41],59:79},{5:40,6:[1,18],10:[1,41],59:80},{4:[1,20],5:14,6:[1,18],10:[1,83],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:85,35:82,45:[1,84],46:81},{6:[2,51],10:[2,51]},{6:[2,49],10:[2,49],51:86,52:[1,87]},{6:[2,49],10:[2,49],51:88,52:[1,87]},{5:89,6:[1,18]},{6:[2,48]},{11:[1,90]},{1:[2,24],11:[2,24],14:[2,24],20:[2,24],32:[2,24],33:[2,24],34:[2,24],36:[2,24],37:[2,24],38:[2,24],39:[2,24],40:[2,24],41:[2,24],42:[2,24],43:[2,24],45:[2,24],47:[2,24],48:[2,24],54:[2,24],55:[2,24],56:[2,24],62:[2,24],63:[2,24],65:[2,24],72:[2,24],76:[2,24]},{1:[2,8]},{6:[1,52],12:91},{11:[2,5],14:[2,5]},{11:[2,3],14:[2,3]},{10:[1,92]},{29:[1,93]},{5:94,6:[1,18]},{1:[2,77],11:[2,77]},{73:[1,95]},{14:[2,60],54:[2,60],55:[2,60],56:[2,60],62:[2,60],63:[2,60],65:[2,60],72:[2,60]},{5:40,6:[1,18],10:[1,41],59:96},{57:97,58:[1,98]},{57:99,58:[1,98]},{47:[1,100],48:[1,101],72:[2,65]},{11:[2,42],14:[2,42],47:[2,42],48:[2,42],54:[2,42],55:[2,42],56:[2,42],62:[2,42],63:[2,42],65:[2,42],72:[2,42]},{4:[1,20],5:14,6:[1,18],10:[1,83],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:103,35:82,45:[1,84],46:102},{4:[1,20],5:14,6:[1,18],10:[1,83],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:85,35:82,45:[1,84],46:104},{20:[1,29],32:[1,28],33:[1,30],34:[1,31],36:[1,105],37:[1,106],38:[1,107],39:[1,108],40:[1,109],41:[1,110],42:[1,111],43:[1,112],45:[1,113]},{6:[2,52],10:[2,52]},{6:[2,50],10:[2,50]},{6:[2,53],10:[2,53]},{14:[2,56],54:[2,56],55:[2,56],56:[2,56],58:[2,56],62:[2,56],63:[2,56],65:[2,56],72:[2,56]},{6:[2,47],14:[2,57],49:114,50:[1,65],54:[2,57],55:[2,57],56:[2,57],58:[2,57],62:[2,57],63:[2,57],65:[2,57],72:[2,57]},{11:[2,7],14:[2,7]},{3:115,4:[1,116]},{10:[1,117]},{11:[2,10],14:[2,10]},{5:120,6:[1,18],67:119,70:118},{14:[2,61],54:[2,61],55:[2,61],56:[2,61],62:[2,61],63:[2,61],65:[2,61],72:[2,61]},{14:[2,62],54:[2,62],55:[2,62],56:[2,62],62:[2,62],63:[2,62],65:[2,62],72:[2,62]},{4:[1,20],5:14,6:[1,18],10:[1,83],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:85,35:82,45:[1,84],46:121},{14:[2,63],54:[2,63],55:[2,63],56:[2,63],62:[2,63],63:[2,63],65:[2,63],72:[2,63]},{4:[1,20],5:14,6:[1,18],10:[1,83],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:85,35:82,45:[1,84],46:122},{4:[1,20],5:14,6:[1,18],10:[1,83],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:85,35:82,45:[1,84],46:123},{11:[1,124],47:[1,100],48:[1,101]},{11:[1,49],20:[1,29],32:[1,28],33:[1,30],34:[1,31],36:[1,105],37:[1,106],38:[1,107],39:[1,108],40:[1,109],41:[1,110],42:[1,111],43:[1,112],45:[1,113]},{11:[2,46],14:[2,46],47:[2,46],48:[2,46],54:[2,46],55:[2,46],56:[2,46],62:[2,46],63:[2,46],65:[2,46],72:[2,46]},{4:[1,20],5:14,6:[1,18],10:[1,17],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:125},{4:[1,20],5:14,6:[1,18],10:[1,17],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:126},{4:[1,20],5:14,6:[1,18],10:[1,17],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:127},{4:[1,20],5:14,6:[1,18],10:[1,17],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:128},{4:[1,20],5:14,6:[1,18],10:[1,17],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:129},{4:[1,20],5:14,6:[1,18],10:[1,17],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:130},{4:[1,20],5:14,6:[1,18],10:[1,17],19:16,20:[1,21],21:[1,22],22:15,23:[1,19],30:131},{44:[1,132],45:[1,133]},{43:[1,134]},{5:135,6:[1,18]},{11:[1,136]},{11:[2,1]},{4:[1,20],19:139,20:[1,21],21:[1,22],22:140,23:[1,19],24:138,25:137},{1:[2,72],11:[2,72],14:[1,141]},{1:[2,70],11:[2,70],14:[2,70]},{1:[2,67],11:[2,67],14:[2,67],68:[1,142],69:[1,143]},{14:[2,54],47:[1,100],48:[1,101],54:[2,54],55:[2,54],56:[2,54],62:[2,54],63:[2,54],65:[2,54],72:[2,54]},{11:[2,44],14:[2,44],47:[2,44],48:[2,44],54:[2,44],55:[2,44],56:[2,44],62:[2,44],63:[2,44],65:[2,44],72:[2,44]},{11:[2,45],14:[2,45],47:[1,100],48:[2,45],54:[2,45],55:[2,45],56:[2,45],62:[2,45],63:[2,45],65:[2,45],72:[2,45]},{11:[2,43],14:[2,43],47:[2,43],48:[2,43],54:[2,43],55:[2,43],56:[2,43],62:[2,43],63:[2,43],65:[2,43],72:[2,43]},{11:[2,32],14:[2,32],20:[1,29],32:[1,28],33:[1,30],34:[1,31],47:[2,32],48:[2,32],54:[2,32],55:[2,32],56:[2,32],62:[2,32],63:[2,32],65:[2,32],72:[2,32]},{11:[2,33],14:[2,33],20:[1,29],32:[1,28],33:[1,30],34:[1,31],47:[2,33],48:[2,33],54:[2,33],55:[2,33],56:[2,33],62:[2,33],63:[2,33],65:[2,33],72:[2,33]},{11:[2,34],14:[2,34],20:[1,29],32:[1,28],33:[1,30],34:[1,31],47:[2,34],48:[2,34],54:[2,34],55:[2,34],56:[2,34],62:[2,34],63:[2,34],65:[2,34],72:[2,34]},{11:[2,35],14:[2,35],20:[1,29],32:[1,28],33:[1,30],34:[1,31],47:[2,35],48:[2,35],54:[2,35],55:[2,35],56:[2,35],62:[2,35],63:[2,35],65:[2,35],72:[2,35]},{11:[2,36],14:[2,36],20:[1,29],32:[1,28],33:[1,30],34:[1,31],47:[2,36],48:[2,36],54:[2,36],55:[2,36],56:[2,36],62:[2,36],63:[2,36],65:[2,36],72:[2,36]},{11:[2,37],14:[2,37],20:[1,29],32:[1,28],33:[1,30],34:[1,31],47:[2,37],48:[2,37],54:[2,37],55:[2,37],56:[2,37],62:[2,37],63:[2,37],65:[2,37],72:[2,37]},{11:[2,38],14:[2,38],20:[1,29],32:[1,28],33:[1,30],34:[1,31],47:[2,38],48:[2,38],54:[2,38],55:[2,38],56:[2,38],62:[2,38],63:[2,38],65:[2,38],72:[2,38]},{11:[2,39],14:[2,39],47:[2,39],48:[2,39],54:[2,39],55:[2,39],56:[2,39],62:[2,39],63:[2,39],65:[2,39],72:[2,39]},{44:[1,144]},{44:[1,145]},{14:[2,58],54:[2,58],55:[2,58],56:[2,58],58:[2,58],62:[2,58],63:[2,58],65:[2,58],72:[2,58]},{11:[2,4],14:[2,4]},{11:[1,146],14:[1,147]},{11:[2,18],14:[2,18]},{11:[2,16],14:[2,16]},{11:[2,17],14:[2,17]},{5:120,6:[1,18],67:148},{1:[2,68],11:[2,68],14:[2,68]},{1:[2,69],11:[2,69],14:[2,69]},{11:[2,40],14:[2,40],47:[2,40],48:[2,40],54:[2,40],55:[2,40],56:[2,40],62:[2,40],63:[2,40],65:[2,40],72:[2,40]},{11:[2,41],14:[2,41],47:[2,41],48:[2,41],54:[2,41],55:[2,41],56:[2,41],62:[2,41],63:[2,41],65:[2,41],72:[2,41]},{1:[2,20]},{4:[1,20],19:139,20:[1,21],21:[1,22],22:140,23:[1,19],24:149},{1:[2,71],11:[2,71],14:[2,71]},{11:[2,19],14:[2,19]}],
defaultActions: {2:[2,78],3:[2,79],4:[2,80],65:[2,48],68:[2,8],116:[2,1],146:[2,20]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function make_keyword_or_identifier(token) {
	var utoken = token.toUpperCase();

	switch (utoken) {
		case 'AND':
		case 'AS':
		case 'ASC':
		case 'BY':
		case 'CREATE':
		case 'CROSS':
		case 'DELETE':
		case 'DESC':
		case 'DROP':
		case 'FROM':
		case 'INNER':
		case 'INSERT':
		case 'INT':
		case 'INTO':
		case 'IS':
		case 'JOIN':
		case 'LEFT':
		case 'NOT':
		case 'NULL':
		case 'ON':
		case 'OR':
		case 'ORDER':
		case 'OUTER':
		case 'RIGHT':
		case 'SELECT':
		case 'TABLE':
		case 'UPDATE':
		case 'VALUES':
		case 'VARCHAR':
		case 'WHERE':
			return utoken;
		default:
			return 'IDENTIFIER';
	}
}
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore whitespace */
break;
case 1:return 10;
break;
case 2:return 11;
break;
case 3:return 32;
break;
case 4:return 20;
break;
case 5:return 33;
break;
case 6:return 34;
break;
case 7:return 36;
break;
case 8:return 37;
break;
case 9:return 38;
break;
case 10:return 41;
break;
case 11:return 42;
break;
case 12:return '>=;';
break;
case 13:return 40;
break;
case 14:return 14;
break;
case 15:
							yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
							return 23;
						
break;
case 16:
							yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
							return 6;
						
break;
case 17:return make_keyword_or_identifier(yy_.yytext);
break;
case 18:return 4;
break;
case 19:return 21;
break;
case 20:/* ignore comment */
break;
case 21:/* return 'EOF' */
break;
}
},
rules: [/^(?:\s+)/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:=)/,/^(?:!=)/,/^(?:<>)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:,)/,/^(?:'(''|[^\'])*')/,/^(?:"(""|[^\"])*")/,/^(?:[a-zA-Z][0-9a-zA-Z_]*)/,/^(?:[1-9][0-9]*)/,/^(?:[1-9][0-9]*\.([0-9]*)?)/,/^(?:\/\/.*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = sql_grammar;
exports.Parser = sql_grammar.Parser;
exports.parse = function () { return sql_grammar.parse.apply(sql_grammar, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}